#!/bin/bash
# Laravel Smart Deploy Script
# Author: Donny Iskandarsyah
# Credits: ChatGPT (GPT-5) & Claude (Sonnet 4.5)
# Version: 2.0.0

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m'

MODE="normal"
USER_PREFIX=$(whoami)

# Parse arguments
for arg in "$@"; do
  case $arg in
    --init) MODE="init" ;;
    --update) MODE="update" ;;
    --help) 
      echo "Usage: deploy [OPTIONS]"
      echo ""
      echo "Options:"
      echo "  --init      First-time deployment with full initialization"
      echo "  --update    Pull from Git and rebuild everything"
      echo "  --help      Show this help message"
      echo ""
      echo "Without options: Quick optimization (no Git/NPM rebuild)"
      exit 0
      ;;
  esac
done

echo -e "\n${CYAN}üöÄ Starting Laravel Deploy (mode: ${MODE})...${NC}\n"

# Pre-flight checks
if [ ! -f "artisan" ]; then
  echo -e "${RED}Error:${NC} Must be run from Laravel project root (artisan not found)."
  exit 1
fi

if [ ! -f ".env" ]; then
  echo -e "${YELLOW}‚ö†Ô∏è  Warning: .env file not found!${NC}"
  read -p "Continue anyway? (y/N): " confirm
  [[ "$confirm" != "y" && "$confirm" != "Y" ]] && exit 1
fi

command -v php >/dev/null 2>&1 || { echo -e "${RED}Error: PHP not found!${NC}"; exit 1; }
command -v composer >/dev/null 2>&1 || { echo -e "${RED}Error: Composer not found!${NC}"; exit 1; }

# Git update mode
if [ "$MODE" = "update" ]; then
  echo -e "${YELLOW}üîÑ Updating from Git...${NC}"
  
  # Check for detached HEAD
  BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
  if [ $? -ne 0 ]; then
    echo -e "${RED}Error: Not a git repository.${NC}"
    exit 1
  fi
  
  if [ "$BRANCH" = "HEAD" ]; then
    echo -e "${RED}Error: Cannot pull, you're in detached HEAD state.${NC}"
    exit 1
  fi
  
  git reset --hard
  git clean -fd -e public/.well-known/
  git pull origin "$BRANCH"
  
  if [ $? -ne 0 ]; then
    echo -e "${RED}Error: Git pull failed!${NC}"
    exit 1
  fi
  
  echo -e "${GREEN}‚úÖ Updated branch '$BRANCH'.${NC}\n"
fi

# Composer install
echo -e "${YELLOW}üì¶ Installing Composer dependencies...${NC}"

# Check APP_ENV to decide --no-dev flag
APP_ENV="production"
if [ -f ".env" ]; then
  APP_ENV=$(grep "^APP_ENV=" .env | cut -d'=' -f2 | tr -d '"' | tr -d "'")
fi

if [ "$APP_ENV" = "production" ]; then
  composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev
else
  composer install --no-interaction --prefer-dist --optimize-autoloader
  echo -e "${CYAN}‚ÑπÔ∏è  Installed with dev dependencies (APP_ENV=${APP_ENV})${NC}"
fi

if [ $? -ne 0 ]; then
  echo -e "${RED}Error: Composer install failed!${NC}"
  exit 1
fi

echo -e "${GREEN}‚úÖ Composer done.${NC}\n"

# NPM build (only in update mode or if explicitly needed)
if [ -f "package.json" ] && { [ "$MODE" = "init" ] || [ "$MODE" = "update" ]; }; then
  command -v npm >/dev/null 2>&1 || { echo -e "${YELLOW}‚ö†Ô∏è  NPM not found, skipping build.${NC}\n"; }
  
  if command -v npm >/dev/null 2>&1; then
    echo -e "${YELLOW}üß© Installing NPM packages...${NC}"
    npm install
    
    if [ $? -ne 0 ]; then
      echo -e "${RED}Error: NPM install failed!${NC}"
      exit 1
    fi
    
    echo -e "${GREEN}‚úÖ NPM done.${NC}"
    echo -e "\n${YELLOW}‚öôÔ∏è Building assets...${NC}"
    
    # Smart detection of build script
    if grep -q '"build"' package.json; then
      npm run build
    elif grep -q '"prod"' package.json; then
      npm run prod
    elif grep -q '"production"' package.json; then
      npm run production
    else
      echo -e "${YELLOW}‚ö†Ô∏è  No build/prod/production script found in package.json${NC}"
    fi
    
    if [ $? -ne 0 ]; then
      echo -e "${RED}Error: NPM build failed!${NC}"
      exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Build complete.${NC}\n"
  fi
else
  if [ ! -f "package.json" ]; then
    echo -e "${CYAN}‚ÑπÔ∏è  Skipping NPM (no package.json).${NC}\n"
  else
    echo -e "${CYAN}‚ÑπÔ∏è  Skipping NPM build (not in init/update mode).${NC}\n"
  fi
fi

# Clear caches
echo -e "${YELLOW}üßπ Clearing caches...${NC}"
php artisan optimize:clear || true

# Helper function to check if artisan command exists
has_artisan_cmd() {
  php artisan list 2>/dev/null | grep -q "$1"
}

# Mode-specific optimizations
if [ "$MODE" = "init" ]; then
  echo -e "${YELLOW}üîß Full Laravel initialization...${NC}"
  has_artisan_cmd "opcache:clear" && php artisan opcache:clear || true
  has_artisan_cmd "icons:cache" && php artisan icons:cache || true
  #php artisan optimize || true
  php artisan storage:link || true
  echo -e "${GREEN}‚úÖ Init complete.${NC}"

elif [ "$MODE" = "update" ]; then
  echo -e "${YELLOW}üîß Laravel update tasks...${NC}"
  has_artisan_cmd "opcache:clear" && php artisan opcache:clear || true
  has_artisan_cmd "icons:cache" && php artisan icons:cache || true
  #php artisan optimize || true
  echo -e "${GREEN}‚úÖ Update done.${NC}"

else
  echo -e "${YELLOW}‚öôÔ∏è Quick maintenance...${NC}"
  has_artisan_cmd "opcache:clear" && php artisan opcache:clear || true
  has_artisan_cmd "icons:cache" && php artisan icons:cache || true
  #php artisan optimize || true
  echo -e "${GREEN}‚úÖ Maintenance complete.${NC}"
fi

# Restart Supervisor worker
echo -e "\n${YELLOW}üîÑ Restarting Supervisor if available...${NC}"

if command -v supervisorctl &>/dev/null; then
  WORKER_NAME="${USER_PREFIX}-worker"
  
  # Try to restart directly with sudo -n (passwordless)
  # This will only work if sudoers file was created by 'worker create'
  if sudo -n supervisorctl restart "${WORKER_NAME}" 2>/dev/null; then
    echo -e "${GREEN}‚úÖ Worker '${WORKER_NAME}' restarted.${NC}"
  else
    # Check exit code to determine the issue
    EXIT_CODE=$?
    
    # Try to check status (also needs sudo -n)
    if sudo -n supervisorctl status "${WORKER_NAME}" &>/dev/null; then
      # Worker exists but restart failed (shouldn't happen if status works)
      echo -e "${YELLOW}‚ö†Ô∏è  Worker exists but restart failed.${NC}"
    else
      # Either worker doesn't exist OR no sudo permissions
      # We can't distinguish, so give helpful message for both cases
      echo -e "${CYAN}‚ÑπÔ∏è  Worker restart skipped (not configured or no permissions).${NC}"
      echo -e "${CYAN}üí° To enable auto-restart on deploy:${NC}"
      echo -e "   1. Login as root or user with sudo"
      echo -e "   2. Run: ${YELLOW}worker create ${USER_PREFIX}${NC}"
      echo -e "   3. This will setup passwordless restart for this user"
    fi
  fi
else
  echo -e "${CYAN}‚ÑπÔ∏è  Supervisor not installed.${NC}"
fi

echo -e "\n${GREEN}üéâ Deployment completed successfully!${NC}\n"
